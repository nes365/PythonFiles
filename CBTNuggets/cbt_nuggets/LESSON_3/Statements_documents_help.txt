Statements, Documents and Help
==============================
* Python statements
* Rules for variables
* Comments, docstrings
* Online help

Python statements
-----------------
* Keyword identifiers are reserved, all included with the standard python install.
and
as
assert
break
class
continue
def		- 	Define a construct
del
elif
else
except
finally
for
form
global
if
import
in
is
lambda
not
or
pass
raise
return
try
while
with
yield

* \ = line continuation (not required when you use; lists, tuples, dictionaries or triple quoted strings that span multiple lines
* Simple vs Compound statements
* Simple is a one line statement, compound is more than one line, or a statement block
* Python uses white space indentation for demarcation
* Compound statements contain a header line (delimited by a colon)
header:
>>>>suite

4 spaces should be used (possible with a tab but not recommended for portability), DO NOT MIX THE TWO IN A PYTHON PROGRAM

Examples:

## Simple statements

>>> l=['apple', 'tomato', 'orange']
>>> 'grape' in l
False
>>> 'apple' in l
True
>>> 

## Compound statements

>>> for i in l:
	print(i, len(i))

	
apple 5
tomato 6
orange 6
>>> 

## Line continuation

>>> l2 = ["This is a long string", \
      "and another one"]
>>> l2
['This is a long string', 'and another one']


Spaces and escape characters (best practices)
---------------------------------------------
* 4 spaces (not tabs as they can vary in length from system to system)
* Python Enhancement Proposal (PEP) 8 - Import this
* Escape character -> alternative interpretation of string data

txtfile = open('C:\new\textdoc.txt', 'w')	->	would interpret \n as an ASCII linefeed operation
txtfile = open('C:\\new\\textdoc.txt', 'w')	-> 	would escape the \ with a \, looks messy
txtfile = open(r'C:\new\textdoc.txt', 'w')	-> 	uses r to signify RAW string

String Escape Characters
------------------------

Escape Seq		Meaning
----------		-------
\newline		Backslash and newline ignored
\\			Backslash (\)
\'			Single quote (')
\"			Double quote (")
\a			ASCII Bell (BEL)
\b			ASCII Backspace (BS)
\f 			ASCII Formfeed (FF)
\n			ASCII Linefeed (LF)
\r			ASCII Carriage Return (CR)
\t			ASCII Horizontal Tab (TAB)
\v			ASCII Vertical Tab (VT)
\ooo			Character with octal value ooo (1,3)
\xhh			Character with hex value hh    (2,3)

can be found at http://docs.python.org

Examples:

## Triple quote

>>> ls = '''The quick brown fox jumped over the lazy dog \
all day long.

more and more

and again!!
'''
>>> 
>>> 
>>> ls
'The quick brown fox jumped over the lazy dog all day long.\n\nmore and more\n\nand again!!\n\n\n'
>>> print(ls)
The quick brown fox jumped over the lazy dog all day long.

more and more

and again!!

## escape characters

>>> print('CBT Nuggets')
CBT Nuggets
>>> print('CBT\nNuggets')
CBT
Nuggets
>>> print('CBT\tNuggets')
CBT	Nuggets
>>> print('C:\newfiles\text.txt')
C:
ewfiles	ext.txt
>>> print(r'C:\newfiles\text.txt')
C:\newfiles\text.txt


Variable Rules and Best Practices
---------------------------------
Variable names:

form: [letter, _] + [letter, digits, _]
i.e. eggs, Eggs, _eggs (Case is significant)

NO SPECIAL CHARACTERS, # $ & etc
NO RESERVED WORDS ARE ALLOWED, if else etc

!! System defined names, prepended and followed by 2 underscores. __self__
!! MORE TO COME

_(underscore) repeats the last expression in the interpreter

name = variable (not declared as a data type and then initialised such as in C)
object = data(type)


Comments and Docstrings
-----------------------
* # - hash
* Multiline comments with triple quoted strings
* Documentation strings __doc__ attribute
* dir() help() functions to generate documentation

example:

>>> import wiper
>>> dir(wiper)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'w']
>>> help(wiper)
Help on module wiper:

NAME
    wiper

DESCRIPTION
    Module name: wiper.py
    Author:      Nick Southorn
    Contact:     n.southorn@gmail.com
    Description: The wiper function clears the IDLE screen

FUNCTIONS
    w()

FILE
    /home/nicksouthorn/wiper.py


>>> 


print(wiper.__doc__)

Module name: wiper.py
Author:      Nick Southorn
Contact:     n.southorn@gmail.com
Description: The wiper function clears the IDLE screen

Getting Help
------------
* import pydoc module
* run help() or pass a definition to help, help(print)
* Run pydoc -g from the command line to start hosting the Python documentation in a web browser.


