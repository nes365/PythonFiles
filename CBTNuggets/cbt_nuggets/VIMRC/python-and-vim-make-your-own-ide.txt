


















 tail_-f_findings.out
Skip_to_content
    * About_this_blog
    * Contact_Me
←_Elegant_option_checking_with_optparse
Code_navigation,_completion_and_snippets_in_vim_→
****** Python and vim: Make your own IDE ******
Posted on February_16,_2009 by Samuel_Huckins
I prefer to use vim for most of my systems administration and programming
related editing tasks. Aside from the usual argument that it will be present on
any *nix system worth its silicon that you log in to, I choose it because of
the succinct and expressive power of its syntax. While I am still learning new
commands and techniques all the time, and while it is true that the learning
curve to be anything resembling proficient is rather steep, few editors can
boast such a wide range of actions in so few commands.
Right of out the box, however, vim isn’t as suited to editing Python code as it
could be. In fact, it’s rather annoying to write Python code with an
uncustomized instance of vim. What follows is a description of how to put into
place what I see as the most essential features of the editor one chooses to
write code, especially Python code, in as manifested with vim. With the
following changes, you can create a highly customized and powerful IDE,
allowing you to increase your productivity without purchasing a commercial
offering.
Before the good stuff, a few requirements. You need to make sure you have vim-
full and vim-python installed. Some systems come with vim-minimal, which is
lacking in many advanced features. These packages should be in most
repositories.
Aside from these package installs, configuration changes described are made in
~/.vimrc. A quick word on the syntax of this file. Double quotation marks
denote a line as a comment. I make it a rule to place a comment line before
every configuration line or block thereof, so I have some sense later of what
the change was for (it’s amazing how fast syntax leaks out of my head when I
don’t use it regularly). Regarding Python files, I eventually also began to
collect the related customizations into a file “~/.vim/ftplugin/python.vim”.
This is loaded whenever Python type files are opened, and allows me to isolate
related configurations.
***** Syntax highlighting *****
Having code displayed with proper highlighting of the logical components makes
reading that code easier to read and understand. Any decent code editor allows
for coloring particular to a number of languages, and vim is no exception. To
get this working, simply add:
1 syntax on
to your ~/.vimrc file. The actual colors will vary with your colorscheme. You
can install new colorschemes (view_hundreds_here), as well as test out
installed ones by typing
1 :colorscheme
The various colorschemes will appear as you tab.
***** Line numbering *****
Having line numbers displayed with code makes it easier to reference and move
around in. It’s easy to add. In ~/.vimrc:
1 # Turn on line numbers:
2 set number
3 # Toggle line numbers and fold column for easy copying:
4 nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
This will allow you to toggle line numbers (as well as the spaces for the fold
column described below) on and off by pressing <F2>. This makes it easy to copy
out code without numbers.
***** Proper indentation and formatting *****
In Python more than almost all languages, indentation is essential, both to get
right and to preserve. While most programmers add indentation to a wide variety
of languages for greater readability, in Python getting this wrong means a
syntax error. The following directive will allow vim to properly keep
indentation in your Python files, without you having to touch <Tab>:
1 filetype plugin indent on
Additionally, you need to download the latest version of this_script, placing
it in ~/.vim/indent/python.vim. This will make indentation much less of a
chore, and more of a pleasure. Be sure to also check out this_blog_post,
wherein Henry Prêcheur explains how to improve indentation for comments as
well.
To improve the formatting and display of improper indentation, as well as
special highlighting for things like string formatting, download the latest
version of this_script, and place it in ~/.vim/syntax/python.vim. Then add this
to your configuration:
1 autocmd FileType python set complete+=k~/.vim/syntax/python.vim isk+=.,(
***** Shortcut complete syntax *****
It can save time and your memory to be able to complete syntactic built-ins
using a keyboard shortcut. [Edit: I had one method to get this working before,
but it wasn't a good solution. For the right way to do this, check out this
post.]
***** Access to documentation *****
It is essential to be able to access built-in help quickly. This_plugin allows
you to view the built-in documentation for a given function by pressing “\pW”
while over the word. This opens a new window, containing the related help
documentation, if found.
***** Ability to run script being edited *****
When debugging, I often need to make a small change, run the program, make
another change, and so on. Having to write and close the file, then invoke it,
is rather less than efficient. Simply add this to the ftplugin/python.vim file
started above:
1 &quot; Execute file being edited with <Shift> + e:
2 map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>
Now you can press <Shift> + e to execute the Python file being edited. Once the
code errors out or completes execution, output stays displayed until a key is
pressed. Then you are returned to the code in the editor. Hard to imagine a
shorter method.
***** Checker utilities and debugging *****
pyflakes and pylint are two popular utilities for checking Python code for
syntax errors, variable reference problems, and other signs of poor quality. If
you haven’t tried them, install them both and see which you like best. Install
the pyflakes and pylint packages for your system. For CentOS, you will need to
add the EPEL_repository to get access to these. Then add the functions listed
here to your configuration. Now simply run “Pyflakes” and “Pylint” from within
vim to view their output on your current file. Once you select the one you
prefer, you could shorten access to it to a single keystroke, or even run it
when you save your file.
[Edit, 2011-01-23, thanks to Mac Ryan for the heads up:] If you prefer a
simpler approach, or want to additionally make sure your scripts are PEP8
compliant, try out the pep8_utility. It’s simple to install and use:
1 sudo easy_install pep8
2 pep8 foo.py
3 > foo.py:3:14: E401 multiple imports on one line
You can run these from within vim as well:
1 :!pep8 %
2 :!pyflakes %
3 :!pylint %
[/Edit]
Once you have narrowed down the region you know a problem is present in, you
will likely need to add some debugging statements and run the code repeatedly.
Adding these_functions into your .vimrc will allow you to add a PDB breakpoint
with <F7> and remove all breakpoints with <Shift> + <F7>.
***** Code folding *****
As soon as your scripts start to encompass more than a few functions, much less
multiple classes, it’s time to start checking out code folding. This feature
allows the display of a class, method, or function as a two lines, one with the
definition line and another showing length:
With a simple key command, you can display or hide the entire block. There are
a number of built-in commands to create and work with folds. I prefer using
this_plugin to allow vim to automatically know how to fold Python code. Once
that is loaded, newly opened Python files will have all their classes and
functions already folded, making it much faster to review files. <Shift> + f
toggles all folds, while f toggles the fold under the cursor.
***** Block navigation *****
This_script provides some advanced controls for selecting, navigating within,
and acting upon blocks of code. You can jump to the top or bottom of a block,
select it, even comment it out all with a few keystrokes.
***** Project navigation *****
Nerdtree allows a window to be added to your vim display showing other files in
your project. A “project” can either be the contents of your current directory,
or you can define its members manually. This allows you to jump around your
project, and open multiple files at once:
===============================================================================
There are many, many more customizations possible concerning vim and Python.
Check around the vim_scripts_pages if you have a particular itch to scratch.
And if you know some good tricks that I didn’t list, please add them via
comments!
Be_Sociable,_Share!
    * [http://dancingpenguinsoflight.com/wp-content/plugins/sociable/images/
      more.png]
[http://dancingpenguinsoflight.com/wp-content/plugins/sociable/images/
closelabel.png]
    * Tweet
[Post_to_Twitter] [Post_to_Delicious] [Post_to_Digg] [Post_to_Reddit]
No related posts.
Related posts brought to you by Yet_Another_Related_Posts_Plugin.
This entry was posted in Programming and tagged CLI, editor, efficiency,
Programming, Python, vim. Bookmark the permalink.
←_Elegant_option_checking_with_optparse
Code_navigation,_completion_and_snippets_in_vim_→
**** 46 Responses to Python and vim: Make your own IDE ****
   1. Pingback: Code_navigation,_completion_and_snippets_in_vim_|_tail_-
      f_findings.out
   2. Pingback: vim_for_Bash_scripting:_A_happier_union_|_tail_-f_findings.out
   3. Morgan_Goosesays:
      April_17,_2009_at_10:17_am
      some of your examples are displaying incorrectly:
      <Shift> + f
      instead of
      + f ?
   4. REdsays:
      April_17,_2009_at_2:39_pm
      map :w:!/usr/bin/env python %
      doesn’t seem to do anything….
   5. micosays:
      April_17,_2009_at_7:31_pm
      man it’s hard to read with &amp;gt; everywhere
   6. Davossays:
      April_17,_2009_at_8:24_pm
      some great tips here, nice post!!
   7. Morgan_Goosesays:
      April_17,_2009_at_9:27_pm
      Working though these tips, make me love vim even more. I’d seen some of
      these but not all, and had not realized how useful they would be until
      now. Thanks for the tips.
   8. Samuel_Huckinssays:
      April_18,_2009_at_9:41_am
      Sorry everyone, it seems I opened this post once in WYSIWYG mode, and
      WordPress made a mess of some of the characters. I believe I have fixed
      them all.
      Glad the tips were useful! I am still finding more all the time.
      @REd: The above-mentioned code mangling messed that part up as well.
      Check the fixed code above and give it a try, I just tested and it does
      work.
   9. Timsays:
      April_19,_2009_at_7:55_am
      There is a different way to run the script that you are editing.
      First line of the script has to be something like:
      #!/usr/bin/env python
      You have to make the script executable:
      chmod a+x scriptname
      Then while you are editing:
      :w
      :!scriptname
  10. SÃ©rgio_Luiz_AraÃºjo_Silvasays:
      April_19,_2009_at_6:16_pm
      SnipMate [:)]
      http://www.vimeo.com/3535418
      site: http://www.vim.org/scripts/script.php?script_id=2540
  11. SÃ©rgio_Luiz_AraÃºjo_Silvasays:
      April_19,_2009_at_6:17_pm
      For execute current file do:
      :!%
      % is the name of current file [:)]
  12. Samuel_Huckinssays:
      April_20,_2009_at_6:56_am
      @Tim and Mr. Silva:
      The advantage of using the method mentioned in the post to execute the
      script being edited is that you don’t need to save (the shortcut does
      that), and you don’t need to make the script executable (the shortcut
      calls the script with Python). Just open a file ending in .py, type
      something that can execute, and then Shift + e. Seems like the shortest
      possible method to me, and I dislike typing [:-)]
  13. Samuel_Huckinssays:
      April_21,_2009_at_6:34_am
      I have been quite impressed with TextMate’s features, which one of my co-
      workers of the Mac persuasion has been eagerly showing me. SnipMate looks
      like a good start, I shall check it out, thanks!
  14. sasasays:
      April_26,_2009_at_2:52_pm
      I had problems with:
      nnoremap :set nonumber!
      Solution for me was:
      set number
      nnoremap :set nonumber!
      Source:
      http://stackoverflow.com/questions/762515/vim-remap-key-to-toggle-line-
      numbering/762633
  15. Samuel_Huckinssays:
      April_26,_2009_at_4:47_pm
      @sasa Yep, sorry about that. I assumed people would first add the “set
      number” mentioned, then add the toggle. Glad you got it working!
  16. Johnsays:
      May_4,_2009_at_5:23_pm
      I think your definition of the gd command is missing the (C-R)(C-W)(CR)
      (where ( and ) are supposed to be angle brackets, but since I’m guessing
      that it got lost as part of the double entity conversion, I’m not using
      the angle brackets).
      But more importantly, isn’t that gd command, and the Shift + e command,
      both already implemented as part of the “Efficient python folding” script
      you link to?
      Anyway, my suggestions are to get an updated syntax/python.vim (it can go
      in your .vim/syntax folder and will override the older version shipped as
      part of runtime). Though if you’re using a heavily patched Linux
      distribution, this might already be present instead of the upstream vim
      version. Also watch that you download the python.vim from there, since
      there are also python3.0.vim scripts on the same page for Python 3.0.
      Either way, be sure to add “let python_highlight_all = 1″ to your .vimrc
      (I couldn’t get it to work when inside ~/.vim/ftplugin/python.vim, but I
      don’t even really understand the difference between let and set, and why
      some lets have g: in front of the option name). It adds nice extra
      highlighting like showing when you have excess spaces on the ends of
      lines or incorrect indentation (with bright red backgrounds on my color
      scheme). And I suspect “let python_slow_sync = 1″ helps fight against the
      loss of syntax highlighting that happens sometimes when editing a large
      file.
      Also adding an indent/python.vim makes it much nicer, though you might
      want to follow this_blog_post_with_instructions_for_fixing_comment
      indentation, or just “set nosi” for python files which also fixes it.
      That blog post also mentions some PEP-8-compatible tab settings which you
      might want to add to your suggestions.
      Also, I like to always have line numbers on in gVim but never in vim, so
      I use something like:
      1 if has(&quot;gui_running&quot;)
      2   set number
      3   set numberwidth=4
      4   set columns=84
      5 endif
      I haven’t really gotten into folding, though reading this post has made
      me more interested, especially since a quick browse of the vim help has
      shown me “set foldlevelstart=99″ for never starting with stuff folded.
      I’ve added “set foldcolumn=1″ and upped the columns to 85 for my GUI to
      see if I start using it.
  17. Samuel_Huckinssays:
      May_5,_2009_at_8:48_pm
      John,
      Goodness! Thanks for all that information.
      You are correct about the command duplication. I collected these things
      from a variety of sources, and didn’t have everything quite straight.
      That link for the latest Python syntax file is quite helpful. I was
      concerned about a good way to keep that updated.
      Concerning folding: I have had one major qualm thus far. When I have
      multi-line strings, aside from docstrings, I have to start consecutive
      lines at the far left, to avoid unintended indentation in the actual
      string. This has foiled the folding methods I have tried thus far. They
      fold the parent function to the point of the string, and then just stop
      the fold. It’s very disconcerting, almost to the point where I have
      considered disabling folding altogether. Perhaps your not folded by
      default fix will be enough.
      Thanks again!
  18. Pingback: $>_eat_BionicApple_&raquo;_Blog_Archive_&raquo;_Just_Some_Text.
      That_is_Blue.
  19. octopusgrabbussays:
      May_25,_2009_at_1:44_pm
      Thank you. This was a very helpeful post. The only thing I had to change
      was to remove comments. They caused errors on startup on python 2.6.2.
  20. Samuel_Huckinssays:
      May_25,_2009_at_2:27_pm
      @octopusgrabbus Not sure what you meant about removing comments. Could
      you post the error you were seeing? The box I work on most with this
      configuration has Python 2.6.2, and I don’t get any errors.
      Glad it was otherwise helpful!
  21. altereccosays:
      May_26,_2009_at_3:54_am
      :set invnumber
      that should do the trick for numbers, whether you have numbers on or off
  22. Pingback: Truth,_Computing_and_Fail_&raquo;_Pimp_my_Vim
  23. Pingback: ä½¿ç¨viæ¥ç¼è¾pythonä»£ç _&raquo;_It’s_not_so_bad
  24. Pingback: Vim_+_snipMate_&laquo;_blog.padowi.se
  25. gregsays:
      March_15,_2010_at_6:15_am
      Python users, highliting the column your cursor is on can be handy :
      highlight CursorColumn cterm=none ctermbg=DarkRed
      autocmd insertLeave *.py set nocursorcolumn
      autocmd insertEnter *.py set cursorcolumn
      Just discovered this week end vim Gist awsome plugin :
      http://www.vim.org/scripts/script.php?script_id=2423
      Enjoy !
  26. Pingback: javier@blog:~$_&raquo;_Blog_Archive_&raquo;_Preparando_Vim_para
      programar_Pyhon_(o_sea_VP!)
  27. Pingback: Zeneffy_>>_Zen_&amp;_Efficace
  28. Pavan Kandepetsays:
      June_15,_2010_at_1:07_am
      You missed to “import vim” for your
      python debugging scripts mentioned
      at http://www.cmdln.org/wp-content/uploads/2008/10/python_ipdb.vim
  29. Peter Froehlichsays:
      June_28,_2010_at_1:18_pm
      The autocmd line you have screws up the “cw” command because it doesn’t
      stop at symbols where it should stop anymore. I mean
      autocmd FileType python set complete+=k~/.vim/syntax/python.vim isk+=.,(
      to be exact. I have no idea what the intention was, but if I have a line
      server.id
      and I hit “cw” on the first “s” I don’t want the whole “server.id” thing
      to be changed, just “server”. YMMV.
  30. Michael_Hustersays:
      July_16,_2010_at_8:25_am
      Something in these scripts messes up the normal mode “w” and “b”. It
      stops at different delimiters. “W” &amp; “B” work fine.
  31. Mac_Ryansays:
      November_20,_2010_at_9:03_am
      Thanks for this, it was indeed the most useful post on Vim as IDE for
      python that I could find around.
      I just wanted to mention that a good addition one might wish to have in
      the checkers section of the article is pep8 (not the actual PEP, but the
      utility that checks conformity of the code to the PEP8 guidelines: http:/
      /pypi.python.org/pypi/pep8).
      Thanks again for the truly useful post!
  32. Pingback: Tips:_Vim_as_Python_IDE_&laquo;_How_to_Train_My_Dragon
  33. agnussays:
      January_23,_2011_at_3:18_am
      >> ” Execute file being edited with + e:
      >> map :w:!/usr/bin/env python %
      this works only for the file opened first, but doesn’t for other files.
      opened in other tabs or splitwindows.
      i think this is somehow connected to ” but i’m too noobish to understand
      how exactly.
  34. Samuel_Huckinssays:
      January_23,_2011_at_1:33_pm
      @Mac Ryan: Thanks, hadn’t used that utility before. Updated the post
      accordingly.
      @angus: quotation marks are the comment character for vim syntax files.
      When I have multiple files open this shortcut works fine. E.g. if I open
      two python files as splitwindows, press Shift + e in one, it runs. Then
      once back in vim if I change focus to the other splitwindow, press Shift
      + e, it runs that one. Are you expecting it to run all open files at once
      or something? That would be disastrous in most cases [:-)]
  35. M. Kannansays:
      March_13,_2011_at_2:54_am
      This is an excellent post for programmers using vim for coding python.
      Thanks Buddy.
  36. Pingback: Configurando_Vim_–_Parte_1_&laquo;_Usuario_Root
  37. Pingback: Links_for_2011-05-29_at_The_Standard_Output
  38. MarkÃ£osays:
      July_1,_2011_at_1:39_pm
      Thanks for this, must usefull.
  39. Pingback: 244_days_with_Vim,_2_days_with_gVim:_introducing_dotvim_|
      soledad_penadÃ©s
  40. saurabhsays:
      July_10,_2011_at_9:38_am
      This is a great post. One stop shop for all the things needed to set up
      the initial python dev env. I appreciate the effort put in to collect
      data from multiple sources and organize it together in one post. Great
      work!!
  41. Durandsays:
      August_6,_2011_at_8:33_pm
      Great post, I’m considering using vim for my programming but I’m not sure
      how even a pythonic vim compares to a proper python IDE like UliPad
  42. ToughGuysays:
      December_2,_2011_at_10:35_am
      éå¸¸å¥½çæç« ~å­¦ä¹ äºã
      nice post
      thank you~
  43. Pingback: Tornando_o_Vim_uma_IDE_amigÃ¡vel_pra_Python_|_Pythonize
  44. Pavelsays:
      January_15,_2012_at_5:45_pm
      Thank you,
      I am starting using Vim as main editor for Python and your post is great
      help.
  45. Pingback: vim_python3.0_syntax_&amp;_indent_æä»¶_&laquo;_AP's_wordpress
  46. Pingback: Backup_from_JM_Wiki_|_Joe_Martel
**** Leave a Reply Cancel_reply ****
Your email address will not be published. Required fields are marked *
Name *[author                        ]
Email *[email                         ]
Website[url                           ]
You may use these HTML tags and attributes: <a href=&quot;&quot;
title=&quot;&quot;> <abbr title=&quot;&quot;> <acronym title=&quot;&quot;> <b>
<blockquote cite=&quot;&quot;> <cite> <code> <del datetime=&quot;&quot;> <em>
<i> <q cite=&quot;&quot;> <strike> <strong>
[Post Comment]
⁰ Notify me of followup comments via e-mail
      [RSS_icon]
**** What is this? ****
From advanced Bash tricks to Python gotchas to MySQL tutorials, this blog
covers various topics in programming and systems administration. Find out how
to get more done and have fun! Keep up with the latest by subscribing_to_the
RSS_feed!
**** About the Author ****
This is the tech blog of Samuel Huckins. You can check out my_homepage and
other websites below, or send_me_a_message_here.
[View_Samuel_Huckins's_profile_on_LinkedIn]
Search for: [s                   ] [Search]
**** Recent Posts ****
    * Transfering_Google-synced_iPad_Notes_between_accounts
    * Handy_Excel_Tip:_Open_workbook_in_new_instance
    * Charlie_Sheen_is_a_long_way_from_philosophy–_but_the_journey_is_winning
    * Show_all_available_documents_to_new_Google_Apps_–_Docs_users
    * Bag_of_useful_Bash_aliases_and_functions
**** Post categories ****
[One of: Select Category/Amusing  (1)/Apple  (6)/Book Review  (2)/CLI  (62)/
Dataviz  (2)/Desktop  (56)/Google  (1)/Linux  (2)/Meta  (6)/Mobile  (3)/MySQL  
(17)/Office  (1)/Programming  (42)/   JavaScript  (1)/   Python  (6)/   Ruby  
(6)/   RubyOnRails  (2)/Reporting  (1)/Security  (1)/Uncategorized  (1)/vim  
(2)/Virtualization  (1)/Web Applications  (6)]
**** Tags ****
Apache Apple Bash bookmarks CLI command database Desktop disk editor efficiency
Excel filesystem firefox graph graphing hardware HTML information keyboard
Launchy Linux logging migration Mobile monitoring MySQL PDF Programming putty
Python Ruby scripting Security ssh subversion svn sysadmin Trac Ubuntu vim
Vista web web_applications Windows
**** Blogroll ****
    * BASH_Cures_Cancer
    * cmdln.org
    * Concision_and_Concinnity
    * Socialized_Software
**** Handy Links ****
    * Dive_Into_Python
    * Lifehacker
    * Linux_Documentation_Project
    * Planet_SysAdmin
    * Python_homepage
    * xkcd
    * Zenoss
**** My Sites ****
    * Domainspotter_Project
    * Flickr
    * Homepage
    * LibraryThing
    * LinkedIn
    * Philosophy_blog
    * Science_blog
    * Trac_–_Code
**** My_del.icio.us ****
    * Linux_Unix:_Solarized:_A_Must_Have_Color_Scheme_For_Gnome_Terminal,_Vim,
      Gedit_And_Lots_More
    * Installing_Sunâs_Java_on_CentOS_5
    * Increasing_or_decreasing_numbers_-_Vim_Tips_Wiki
    * Installing_Internet_Explorer_6_(IE6)_on_Linux_(Ubuntu)_|_Daniel_Gibbs
      Journal
    * Juniper_Network_Connect_on_Ubuntu
[Locations_of_visitors_to_this_page]
    * Posts 191
    * Words in Posts 69,962
    * Comments 491
 alt="" />

===============================================================================

[Hack_to_Live]
[Spreadfirefox_Affiliate_Button]
[Use_Linux]
[This_blog_is_powered_by_Wordpress]
[Use_Python]
[Ruby_programming_language]
[Ubuntu:_Linux_for_human_beings]
[Programming_Blogs_-_BlogCatalog_Blog_Directory]
**** Recent Posts ****
    * Transfering_Google-synced_iPad_Notes_between_accounts
    * Handy_Excel_Tip:_Open_workbook_in_new_instance
    * Charlie_Sheen_is_a_long_way_from_philosophy–_but_the_journey_is_winning
    * Show_all_available_documents_to_new_Google_Apps_–_Docs_users
    * Bag_of_useful_Bash_aliases_and_functions
    * **** Recent Comments ****
          o JoJo on How_to_completely_reset_an_Apache_instance_in_Ubuntu
          o Ian_Pride on How_to_completely_reset_an_Apache_instance_in_Ubuntu
          o David on How_to_completely_reset_an_Apache_instance_in_Ubuntu
          o chris on How_to_completely_reset_an_Apache_instance_in_Ubuntu
          o William on How_to_completely_reset_an_Apache_instance_in_Ubuntu
    * **** Latest_Twitterage ****

    * **** Meta ****
          o Log_in
          o Entries_RSS
          o Comments_RSS
          o WordPress.org
tail_-f_findings.out, by Samuel_Huckins | Theme: variant of twentyten. | Site
license
Proudly_powered_by_WordPress.
