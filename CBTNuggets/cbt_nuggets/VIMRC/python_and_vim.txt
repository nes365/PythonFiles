Useful VIM Settings for working with Python:
 _____________________________________________________________________________
|Setting______|Abbr.|Explanation______________________________________________|
|             |     |A four-space tab indent width is the prefered coding     |
|tabstop=4    |  ts |style for Python (and everything else!), although of     |
|             |     |course some disagree. This page generally assumes you    |
|_____________|_____|want_4-space_indents.____________________________________|
|shiftwidth=4 |  sw |This allows you to use the < and > keys from VIM's visual|
|_____________|_____|(marking)_mode_to_block_indent/unindent_regions__________|
|             |     |Use the &quot;shiftwidth&quot; setting for inserting     |
|             |     |<TAB>s instead of the &quot;tabstop&quot; setting, when  |
|smarttab     | sta |at the beginning of a line. This may be redundant for    |
|             |     |most people, but some poeple like to keep their tabstop=8|
|             |     |for compatability when loading files, but setting        |
|_____________|_____|shiftwidth=4_for_nicer_coding_style._____________________|
|             |     |Insert spaces instead of <TAB> character when the <TAB>  |
|             |     |key is pressed. This is also the prefered method of      |
|             |     |Python coding, since Python is especially sensitive to   |
|expandtab    |  et |problems with indenting which can occur when people load |
|             |     |files in different editors with different tab settings,  |
|             |     |and also cutting and pasting between applications (ie    |
|             |     |email/news for example) can result in problems. It is    |
|_____________|_____|safer_and_more_portable_to_use_spaces_for_indenting._____|
|             |     |People like using real tab character instead of spaces   |
|             |     |because it makes it easier when pressing BACKSPACE or    |
|             |     |DELETE, since if the indent is using spaces it will take |
|softtabstop=4| sts |4 keystrokes to delete the indent. Using this setting,   |
|             |     |however, makes VIM see multiple space characters as      |
|             |     |tabstops, and so <BS> does the right thing and will      |
|_____________|_____|delete_four_spaces_(assuming_4_is_your_setting)._________|
|             |     |Very painful to live without this (especially with       |
|autoindent   |  ai |Python)! It means that when you press RETURN and a new   |
|             |     |line is created, the indent of the new line will match   |
|_____________|_____|that_of_the_previous_line._______________________________|
| ___________|__ _| _______________________________________________________|
| ___________|__ _| _______________________________________________________|
| ___________|__ _| _______________________________________________________|
| ___________|__ _| _______________________________________________________|
  Remember. You can do :help command to get more info on these settings from
                                  inside VIM.
                                        
More complicated settings:
===============================================================================
SmartIndent
     The following line sets the smartindent mode for *.py files. It means
     that after typing lines which start with any of the keywords in the
     list (ie. def, class, if, etc) the next line will automatically
     indent itself to the next level of indentation:
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
     Another approach is to create a key mapping which detects when you
     type a colon (:) followed by a RETURN (<CR>), and adds a <TAB>
     keypress to the end.
im :<CR> :<CR><TAB>
===============================================================================
Trim Trailing Whitespace
     Many people like to remove any extra whitespace from the ends of
     lines. Here is one way to do it when saving your file.
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
===============================================================================
TSend tips to x at vex.net
 
